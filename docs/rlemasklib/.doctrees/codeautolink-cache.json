{
  "api/index": [],
  "api/rlemasklib/BoolFunc": [
    {
      "source": ">>> d1 = encode(np.eye(3))\n>>> d2 = encode(np.eye(3)[::-1])\n>>> d3 = merge([d1, d2], ~BoolFunc.X & BoolFunc.Y)\narray([[0, 0, 1],\n       [0, 0, 0],\n       [1, 0, 0]], dtype=uint8)",
      "names": [],
      "example": {
        "document": "api/rlemasklib/BoolFunc",
        "ref_id": "boolfunc",
        "headings": [
          "BoolFunc"
        ]
      },
      "doc_lineno": 20
    }
  ],
  "api/rlemasklib/RLEMask": [],
  "api/rlemasklib/RLEMask.T": [],
  "api/rlemasklib/RLEMask.__and__": [
    {
      "source": ">>> rle1 = RLEMask(np.eye(3))\n>>> rle2 = RLEMask(np.eye(3)[::-1])\n>>> np.array(rle1 & rle2)\narray([[0, 0, 0],\n       [0, 1, 0],\n       [0, 0, 0]], dtype=uint8)",
      "names": [],
      "example": {
        "document": "api/rlemasklib/RLEMask.__and__",
        "ref_id": "and",
        "headings": [
          "__and__"
        ]
      },
      "doc_lineno": 19
    }
  ],
  "api/rlemasklib/RLEMask.__array__": [],
  "api/rlemasklib/RLEMask.__eq__": [],
  "api/rlemasklib/RLEMask.__getitem__": [
    {
      "source": ">>> rle = RLEMask(np.eye(4))\n>>> rle[1:3, 2:4].shape\n(2, 2)",
      "names": [],
      "example": {
        "document": "api/rlemasklib/RLEMask.__getitem__",
        "ref_id": "getitem",
        "headings": [
          "__getitem__"
        ]
      },
      "doc_lineno": 18
    },
    {
      "source": ">>> rle = RLEMask(np.eye(4))\n>>> rle[1, 1]\n1",
      "names": [],
      "example": {
        "document": "api/rlemasklib/RLEMask.__getitem__",
        "ref_id": "getitem",
        "headings": [
          "__getitem__"
        ]
      },
      "doc_lineno": 24
    }
  ],
  "api/rlemasklib/RLEMask.__iand__": [
    {
      "source": ">>> rle1 = RLEMask(np.eye(3))\n>>> rle2 = RLEMask(np.eye(3)[::-1])\n>>> np.array(rle1 & rle2)\narray([[0, 0, 0],\n       [0, 1, 0],\n       [0, 0, 0]], dtype=uint8)",
      "names": [],
      "example": {
        "document": "api/rlemasklib/RLEMask.__iand__",
        "ref_id": "iand",
        "headings": [
          "__iand__"
        ]
      },
      "doc_lineno": 19
    }
  ],
  "api/rlemasklib/RLEMask.__invert__": [
    {
      "source": ">>> rle = RLEMask(np.eye(3))\n>>> np.array(~rle)\narray([[0, 1, 1],\n       [1, 0, 1],\n       [1, 1, 0]], dtype=uint8)",
      "names": [],
      "example": {
        "document": "api/rlemasklib/RLEMask.__invert__",
        "ref_id": "invert",
        "headings": [
          "__invert__"
        ]
      },
      "doc_lineno": 16
    }
  ],
  "api/rlemasklib/RLEMask.__ior__": [
    {
      "source": ">>> rle1 = RLEMask(np.eye(3))\n>>> rle2 = RLEMask(np.eye(3, k=-1))\n>>> np.array(rle1 | rle2)\narray([[1, 1, 1],\n       [1, 1, 1],\n       [1, 1, 1]], dtype=uint8)",
      "names": [],
      "example": {
        "document": "api/rlemasklib/RLEMask.__ior__",
        "ref_id": "ior",
        "headings": [
          "__ior__"
        ]
      },
      "doc_lineno": 19
    }
  ],
  "api/rlemasklib/RLEMask.__isub__": [
    {
      "source": ">>> rle1 = RLEMask(np.eye(3))\n>>> rle2 = RLEMask(np.eye(3)[::-1])\n>>> np.array(rle1 - rle2)\narray([[1, 0, 0],\n       [0, 0, 0],\n       [0, 0, 1]], dtype=uint8)",
      "names": [],
      "example": {
        "document": "api/rlemasklib/RLEMask.__isub__",
        "ref_id": "isub",
        "headings": [
          "__isub__"
        ]
      },
      "doc_lineno": 19
    }
  ],
  "api/rlemasklib/RLEMask.__ixor__": [
    {
      "source": ">>> rle1 = RLEMask(np.eye(3))\n>>> rle2 = RLEMask(np.eye(3)[::-1])\n>>> np.array(rle1 ^ rle2)\narray([[1, 0, 1],\n       [0, 1, 0],\n       [1, 0, 1]], dtype=uint8)",
      "names": [],
      "example": {
        "document": "api/rlemasklib/RLEMask.__ixor__",
        "ref_id": "ixor",
        "headings": [
          "__ixor__"
        ]
      },
      "doc_lineno": 19
    }
  ],
  "api/rlemasklib/RLEMask.__or__": [
    {
      "source": ">>> rle1 = RLEMask(np.eye(3))\n>>> rle2 = RLEMask(np.eye(3)[::-1])\n>>> np.array(rle1 | rle2)\narray([[1, 0, 1],\n       [0, 1, 0],\n       [1, 0, 1]], dtype=uint8)",
      "names": [],
      "example": {
        "document": "api/rlemasklib/RLEMask.__or__",
        "ref_id": "or",
        "headings": [
          "__or__"
        ]
      },
      "doc_lineno": 19
    }
  ],
  "api/rlemasklib/RLEMask.__repr__": [],
  "api/rlemasklib/RLEMask.__setitem__": [
    {
      "source": ">>> rle = RLEMask.ones((4, 4))\n>>> rle[1:3, 2:4] = 0\n>>> np.array(rle)\narray([[1, 1, 1, 1],\n       [1, 1, 0, 0],\n       [1, 1, 0, 0],\n       [1, 1, 1, 1]], dtype=uint8)",
      "names": [],
      "example": {
        "document": "api/rlemasklib/RLEMask.__setitem__",
        "ref_id": "setitem",
        "headings": [
          "__setitem__"
        ]
      },
      "doc_lineno": 20
    }
  ],
  "api/rlemasklib/RLEMask.__sub__": [
    {
      "source": ">>> rle1 = RLEMask(np.eye(3))\n>>> rle2 = RLEMask(np.eye(3)[::-1])\n>>> np.array(rle1 - rle2)\narray([[1, 0, 0],\n       [0, 0, 0],\n       [0, 0, 1]], dtype=uint8)",
      "names": [],
      "example": {
        "document": "api/rlemasklib/RLEMask.__sub__",
        "ref_id": "sub",
        "headings": [
          "__sub__"
        ]
      },
      "doc_lineno": 19
    }
  ],
  "api/rlemasklib/RLEMask.__xor__": [
    {
      "source": ">>> rle1 = RLEMask(np.eye(3))\n>>> rle2 = RLEMask(np.eye(3)[::-1])\n>>> np.array(rle1 ^ rle2)\narray([[1, 0, 1],\n       [0, 1, 0],\n       [1, 0, 1]], dtype=uint8)",
      "names": [],
      "example": {
        "document": "api/rlemasklib/RLEMask.__xor__",
        "ref_id": "xor",
        "headings": [
          "__xor__"
        ]
      },
      "doc_lineno": 19
    }
  ],
  "api/rlemasklib/RLEMask.all": [],
  "api/rlemasklib/RLEMask.any": [],
  "api/rlemasklib/RLEMask.area": [],
  "api/rlemasklib/RLEMask.avg_pool2d_valid": [],
  "api/rlemasklib/RLEMask.avg_pool2x2": [],
  "api/rlemasklib/RLEMask.bbox": [],
  "api/rlemasklib/RLEMask.centroid": [],
  "api/rlemasklib/RLEMask.complement": [],
  "api/rlemasklib/RLEMask.concatenate": [],
  "api/rlemasklib/RLEMask.connected_components": [],
  "api/rlemasklib/RLEMask.contours": [],
  "api/rlemasklib/RLEMask.conv2d_valid": [],
  "api/rlemasklib/RLEMask.copy": [],
  "api/rlemasklib/RLEMask.count_nonzero": [],
  "api/rlemasklib/RLEMask.counts": [],
  "api/rlemasklib/RLEMask.counts_view": [],
  "api/rlemasklib/RLEMask.crop": [],
  "api/rlemasklib/RLEMask.density": [],
  "api/rlemasklib/RLEMask.dilate": [],
  "api/rlemasklib/RLEMask.dilate3x3": [],
  "api/rlemasklib/RLEMask.dilate5x5": [
    {
      "source": "0 1 1 1 0\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n0 1 1 1 0",
      "names": [],
      "example": {
        "document": "api/rlemasklib/RLEMask.dilate5x5",
        "ref_id": "dilate5x5",
        "headings": [
          "dilate5x5"
        ]
      },
      "doc_lineno": 12
    }
  ],
  "api/rlemasklib/RLEMask.dilate_vertical": [],
  "api/rlemasklib/RLEMask.erode": [],
  "api/rlemasklib/RLEMask.erode3x3": [],
  "api/rlemasklib/RLEMask.erode5x5": [
    {
      "source": "0 1 1 1 0\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n0 1 1 1 0",
      "names": [],
      "example": {
        "document": "api/rlemasklib/RLEMask.erode5x5",
        "ref_id": "erode5x5",
        "headings": [
          "erode5x5"
        ]
      },
      "doc_lineno": 12
    }
  ],
  "api/rlemasklib/RLEMask.fill_circle": [],
  "api/rlemasklib/RLEMask.fill_rectangle": [],
  "api/rlemasklib/RLEMask.fill_small_holes": [],
  "api/rlemasklib/RLEMask.flip": [],
  "api/rlemasklib/RLEMask.fliplr": [],
  "api/rlemasklib/RLEMask.flipud": [],
  "api/rlemasklib/RLEMask.from_array": [],
  "api/rlemasklib/RLEMask.from_bbox": [],
  "api/rlemasklib/RLEMask.from_circle": [],
  "api/rlemasklib/RLEMask.from_counts": [],
  "api/rlemasklib/RLEMask.from_dict": [],
  "api/rlemasklib/RLEMask.from_polygon": [],
  "api/rlemasklib/RLEMask.hconcat": [],
  "api/rlemasklib/RLEMask.intersection": [],
  "api/rlemasklib/RLEMask.iou": [],
  "api/rlemasklib/RLEMask.iou_matrix": [],
  "api/rlemasklib/RLEMask.is_valid_rle": [],
  "api/rlemasklib/RLEMask.largest_connected_component": [],
  "api/rlemasklib/RLEMask.largest_interior_rectangle": [],
  "api/rlemasklib/RLEMask.largest_interior_rectangle_around": [],
  "api/rlemasklib/RLEMask.make_merge_function": [
    {
      "source": ">>> mergefun = RLEMask.make_merge_function(lambda a, b, c: (a | b) & ~c)\n>>> rle1 = RLEMask(np.eye(3))\n>>> rle2 = RLEMask(np.eye(3)[::-1])\n>>> rle3 = RLEMask(np.eye(3, k=-1))\n>>> rle = mergefun(rle1, rle2, rle3)\n>>> np.array(rle)\narray([[1, 0, 0],\n       [0, 0, 0],\n       [0, 0, 1]], dtype=uint8)",
      "names": [],
      "example": {
        "document": "api/rlemasklib/RLEMask.make_merge_function",
        "ref_id": "make-merge-function",
        "headings": [
          "make_merge_function"
        ]
      },
      "doc_lineno": 30
    }
  ],
  "api/rlemasklib/RLEMask.max_pool2x2": [],
  "api/rlemasklib/RLEMask.merge": [],
  "api/rlemasklib/RLEMask.merge_count": [],
  "api/rlemasklib/RLEMask.merge_many": [],
  "api/rlemasklib/RLEMask.merge_many_custom": [],
  "api/rlemasklib/RLEMask.merge_to_label_map": [],
  "api/rlemasklib/RLEMask.min_pool2x2": [],
  "api/rlemasklib/RLEMask.nonzero": [],
  "api/rlemasklib/RLEMask.ones": [],
  "api/rlemasklib/RLEMask.ones_like": [],
  "api/rlemasklib/RLEMask.pad": [],
  "api/rlemasklib/RLEMask.perimeter": [],
  "api/rlemasklib/RLEMask.remove_small_components": [],
  "api/rlemasklib/RLEMask.repeat": [],
  "api/rlemasklib/RLEMask.resize": [],
  "api/rlemasklib/RLEMask.rot90": [],
  "api/rlemasklib/RLEMask.shape": [],
  "api/rlemasklib/RLEMask.shift": [],
  "api/rlemasklib/RLEMask.tight_crop": [],
  "api/rlemasklib/RLEMask.tile": [],
  "api/rlemasklib/RLEMask.to_array": [],
  "api/rlemasklib/RLEMask.to_dict": [],
  "api/rlemasklib/RLEMask.transpose": [],
  "api/rlemasklib/RLEMask.union": [],
  "api/rlemasklib/RLEMask.vconcat": [],
  "api/rlemasklib/RLEMask.warp_affine": [],
  "api/rlemasklib/RLEMask.warp_distorted": [],
  "api/rlemasklib/RLEMask.warp_perspective": [],
  "api/rlemasklib/RLEMask.zeros": [],
  "api/rlemasklib/RLEMask.zeros_like": [],
  "api/rlemasklib/area": [],
  "api/rlemasklib/centroid": [],
  "api/rlemasklib/closing": [],
  "api/rlemasklib/closing2": [
    {
      "source": "0 1 1 1 0\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n0 1 1 1 0",
      "names": [],
      "example": {
        "document": "api/rlemasklib/closing2",
        "ref_id": "closing2",
        "headings": [
          "closing2"
        ]
      },
      "doc_lineno": 12
    }
  ],
  "api/rlemasklib/compress": [],
  "api/rlemasklib/connected_components": [],
  "api/rlemasklib/crop": [],
  "api/rlemasklib/decode": [],
  "api/rlemasklib/decompress": [],
  "api/rlemasklib/difference": [],
  "api/rlemasklib/dilate": [],
  "api/rlemasklib/dilate2": [
    {
      "source": "0 1 1 1 0\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n0 1 1 1 0",
      "names": [],
      "example": {
        "document": "api/rlemasklib/dilate2",
        "ref_id": "dilate2",
        "headings": [
          "dilate2"
        ]
      },
      "doc_lineno": 12
    }
  ],
  "api/rlemasklib/empty": [],
  "api/rlemasklib/encode": [],
  "api/rlemasklib/erode": [],
  "api/rlemasklib/erode2": [
    {
      "source": "0 1 1 1 0\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n0 1 1 1 0",
      "names": [],
      "example": {
        "document": "api/rlemasklib/erode2",
        "ref_id": "erode2",
        "headings": [
          "erode2"
        ]
      },
      "doc_lineno": 12
    }
  ],
  "api/rlemasklib/fill_small_holes": [],
  "api/rlemasklib/from_bbox": [],
  "api/rlemasklib/from_polygon": [],
  "api/rlemasklib/full": [],
  "api/rlemasklib/index": [],
  "api/rlemasklib/intersection": [],
  "api/rlemasklib/iou": [],
  "api/rlemasklib/largest_connected_component": [],
  "api/rlemasklib/merge": [],
  "api/rlemasklib/ones": [],
  "api/rlemasklib/ones_like": [],
  "api/rlemasklib/opening": [],
  "api/rlemasklib/opening2": [
    {
      "source": "0 1 1 1 0\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n0 1 1 1 0",
      "names": [],
      "example": {
        "document": "api/rlemasklib/opening2",
        "ref_id": "opening2",
        "headings": [
          "opening2"
        ]
      },
      "doc_lineno": 12
    }
  ],
  "api/rlemasklib/pad": [],
  "api/rlemasklib/remove_small_components": [],
  "api/rlemasklib/shift": [],
  "api/rlemasklib/symmetric_difference": [],
  "api/rlemasklib/to_bbox": [],
  "api/rlemasklib/union": [],
  "api/rlemasklib/zeros": [],
  "api/rlemasklib/zeros_like": [],
  "index": [
    {
      "source": "import numpy as np\nfrom rlemasklib import RLEMask\n\n# Create a simple binary mask\nmask = np.array([\n    [0, 1, 1],\n    [1, 1, 0],\n    [0, 0, 1]\n])\n\n# Convert the NumPy mask into an RLEMask\nrle_mask = RLEMask.from_array(mask)\n\n# Print the RLE representation\nprint(rle_mask)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "rlemasklib"
          ],
          "code_str": "rlemasklib",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "rlemasklib"
        },
        {
          "import_components": [
            "rlemasklib",
            "RLEMask"
          ],
          "code_str": "RLEMask",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "rlemasklib.RLEMask"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "rlemasklib",
            "RLEMask",
            "from_array"
          ],
          "code_str": "RLEMask.from_array",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "rlemasklib.RLEMask.from_array"
        },
        {
          "import_components": [
            "rlemasklib",
            "RLEMask",
            "from_array",
            "()"
          ],
          "code_str": "rle_mask",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "rlemasklib.RLEMask"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "rlemasklib",
            "RLEMask",
            "from_array",
            "()"
          ],
          "code_str": "rle_mask",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "rlemasklib.RLEMask"
        }
      ],
      "example": {
        "document": "index",
        "ref_id": "creating-an-rlemask-from-a-numpy-array",
        "headings": [
          "Run-Length Encoded Mask Operations",
          "Object-Oriented Usage",
          "Creating an RLEMask from a NumPy Array"
        ]
      },
      "doc_lineno": 48
    },
    {
      "source": "from rlemasklib import RLEMask\n\nmask1 = RLEMask.from_array(np.array([\n    [1, 0, 1],\n    [0, 1, 0],\n    [1, 0, 1]\n]))\n\nmask2 = RLEMask.from_array(np.array([\n    [0, 1, 0],\n    [1, 1, 1],\n    [0, 1, 0]\n]))\n\nunion_mask = mask1 | mask2\nintersection_mask = mask1 & mask2\n\nunion_mask = RLEMask.union([mask1, mask2])  # Any number of masks can be used\n\ndifference_mask = mask1 - mask2\ncomplement = ~mask1",
      "names": [
        {
          "import_components": [
            "rlemasklib"
          ],
          "code_str": "rlemasklib",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "rlemasklib"
        },
        {
          "import_components": [
            "rlemasklib",
            "RLEMask"
          ],
          "code_str": "RLEMask",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "rlemasklib.RLEMask"
        },
        {
          "import_components": [
            "rlemasklib",
            "RLEMask",
            "from_array"
          ],
          "code_str": "RLEMask.from_array",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "rlemasklib.RLEMask.from_array"
        },
        {
          "import_components": [
            "rlemasklib",
            "RLEMask",
            "from_array",
            "()"
          ],
          "code_str": "mask1",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "rlemasklib.RLEMask"
        },
        {
          "import_components": [
            "rlemasklib",
            "RLEMask",
            "from_array"
          ],
          "code_str": "RLEMask.from_array",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "rlemasklib.RLEMask.from_array"
        },
        {
          "import_components": [
            "rlemasklib",
            "RLEMask",
            "from_array",
            "()"
          ],
          "code_str": "mask2",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "rlemasklib.RLEMask"
        },
        {
          "import_components": [
            "rlemasklib",
            "RLEMask",
            "from_array",
            "()"
          ],
          "code_str": "mask1",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "rlemasklib.RLEMask"
        },
        {
          "import_components": [
            "rlemasklib",
            "RLEMask",
            "from_array",
            "()"
          ],
          "code_str": "mask2",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "rlemasklib.RLEMask"
        },
        {
          "import_components": [
            "rlemasklib",
            "RLEMask",
            "from_array",
            "()"
          ],
          "code_str": "mask1",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "rlemasklib.RLEMask"
        },
        {
          "import_components": [
            "rlemasklib",
            "RLEMask",
            "from_array",
            "()"
          ],
          "code_str": "mask2",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "rlemasklib.RLEMask"
        },
        {
          "import_components": [
            "rlemasklib",
            "RLEMask",
            "union"
          ],
          "code_str": "RLEMask.union",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "rlemasklib.RLEMask.union"
        },
        {
          "import_components": [
            "rlemasklib",
            "RLEMask",
            "from_array",
            "()"
          ],
          "code_str": "mask1",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "rlemasklib.RLEMask"
        },
        {
          "import_components": [
            "rlemasklib",
            "RLEMask",
            "from_array",
            "()"
          ],
          "code_str": "mask2",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "rlemasklib.RLEMask"
        },
        {
          "import_components": [
            "rlemasklib",
            "RLEMask",
            "union",
            "()"
          ],
          "code_str": "union_mask",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "rlemasklib.RLEMask"
        },
        {
          "import_components": [
            "rlemasklib",
            "RLEMask",
            "from_array",
            "()"
          ],
          "code_str": "mask1",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "rlemasklib.RLEMask"
        },
        {
          "import_components": [
            "rlemasklib",
            "RLEMask",
            "from_array",
            "()"
          ],
          "code_str": "mask2",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "rlemasklib.RLEMask"
        },
        {
          "import_components": [
            "rlemasklib",
            "RLEMask",
            "from_array",
            "()"
          ],
          "code_str": "mask1",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "rlemasklib.RLEMask"
        }
      ],
      "example": {
        "document": "index",
        "ref_id": "boolean-operations-on-masks",
        "headings": [
          "Run-Length Encoded Mask Operations",
          "Object-Oriented Usage",
          "Boolean Operations on Masks"
        ]
      },
      "doc_lineno": 71
    },
    {
      "source": "sliced_mask = mask1[1:3, 1:3]\nprint(np.array(sliced_mask))",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "index",
        "ref_id": "slicing",
        "headings": [
          "Run-Length Encoded Mask Operations",
          "Object-Oriented Usage",
          "Slicing"
        ]
      },
      "doc_lineno": 101
    },
    {
      "source": "print(mask1[1, 1])  # prints 1",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "index",
        "ref_id": "slicing",
        "headings": [
          "Run-Length Encoded Mask Operations",
          "Object-Oriented Usage",
          "Slicing"
        ]
      },
      "doc_lineno": 109
    },
    {
      "source": "mask = RLEMask.zeros((3, 3))\nmask[1:3, 1:3] = 1\nmask[0, 0] = 1",
      "names": [],
      "example": {
        "document": "index",
        "ref_id": "slicing",
        "headings": [
          "Run-Length Encoded Mask Operations",
          "Object-Oriented Usage",
          "Slicing"
        ]
      },
      "doc_lineno": 116
    },
    {
      "source": "eroded_mask = mask1.erode3x3(connectivity=4)\ndilated_mask = mask1.dilate3x3(connectivity=4)\nprint(np.array(eroded_mask))",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "index",
        "ref_id": "morphological-operations",
        "headings": [
          "Run-Length Encoded Mask Operations",
          "Object-Oriented Usage",
          "Morphological Operations"
        ]
      },
      "doc_lineno": 129
    },
    {
      "source": "flipped_mask = mask1.fliplr()\ntransposed_mask = mask1.transpose()  # Equivalent to mask1.T\nrotated_mask = mask1.rot90(k=1)  # Rotate 90 degrees counterclockwise",
      "names": [],
      "example": {
        "document": "index",
        "ref_id": "flipping-rotation-transpose",
        "headings": [
          "Run-Length Encoded Mask Operations",
          "Object-Oriented Usage",
          "Flipping, Rotation, Transpose"
        ]
      },
      "doc_lineno": 142
    },
    {
      "source": "mask = RLEMask.from_array(np.array([\n    [0, 1, 1],\n    [1, 1, 1],\n    [0, 0, 0]\n]))\n\ncomponents = mask.connected_components(connectivity=4)\nfor component in components:\n    print(component.area())\n\nmask2 = mask.remove_small_components(connectivity=4, min_size=3)\nlargest_comp = mask.largest_connected_component(connectivity=8)",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "index",
        "ref_id": "flipping-rotation-transpose",
        "headings": [
          "Run-Length Encoded Mask Operations",
          "Object-Oriented Usage",
          "Flipping, Rotation, Transpose"
        ]
      },
      "doc_lineno": 153
    },
    {
      "source": "import numpy as np\nimport rlemasklib\nfrom rlemasklib import RLEMask\n\nmask1 = np.array([\n    [0, 1, 1],\n    [1, 1, 0],\n    [0, 0, 1]\n])\nmask2 = np.array([\n    [1, 1, 1],\n    [1, 1, 0],\n    [0, 0, 1]\n])\n\nrle_dict1 = rlemasklib.encode(mask)  # functional API: array to dict directly)\nrle1 = RLEMask.from_dict(rle_dict1)  # OOP: dict to RLEMask\nrle2 = RLEMask.from_array(mask)  # OOP: array to RLEMask\nrle_dict2 = rle2.to_dict()  # OOP: RLEMask to dict\nintersection_dict = rlemasklib.intersection([rle_dict1, rle_dict2])\nintersection_rle = RLEMask.intersection([rle1, rle2])",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "rlemasklib"
          ],
          "code_str": "rlemasklib",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "rlemasklib"
        },
        {
          "import_components": [
            "rlemasklib"
          ],
          "code_str": "rlemasklib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "rlemasklib"
        },
        {
          "import_components": [
            "rlemasklib",
            "RLEMask"
          ],
          "code_str": "RLEMask",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "rlemasklib.RLEMask"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "rlemasklib",
            "encode"
          ],
          "code_str": "rlemasklib.encode",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "rlemasklib.encode"
        },
        {
          "import_components": [
            "rlemasklib",
            "RLEMask",
            "from_dict"
          ],
          "code_str": "RLEMask.from_dict",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "rlemasklib.RLEMask.from_dict"
        },
        {
          "import_components": [
            "rlemasklib",
            "RLEMask",
            "from_dict",
            "()"
          ],
          "code_str": "rle1",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "rlemasklib.RLEMask"
        },
        {
          "import_components": [
            "rlemasklib",
            "RLEMask",
            "from_array"
          ],
          "code_str": "RLEMask.from_array",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "rlemasklib.RLEMask.from_array"
        },
        {
          "import_components": [
            "rlemasklib",
            "RLEMask",
            "from_array",
            "()"
          ],
          "code_str": "rle2",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "rlemasklib.RLEMask"
        },
        {
          "import_components": [
            "rlemasklib",
            "RLEMask",
            "from_array",
            "()",
            "to_dict"
          ],
          "code_str": "rle2.to_dict",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "rlemasklib.RLEMask.to_dict"
        },
        {
          "import_components": [
            "rlemasklib",
            "intersection"
          ],
          "code_str": "rlemasklib.intersection",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "rlemasklib.intersection"
        },
        {
          "import_components": [
            "rlemasklib",
            "RLEMask",
            "intersection"
          ],
          "code_str": "RLEMask.intersection",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "rlemasklib.RLEMask.intersection"
        },
        {
          "import_components": [
            "rlemasklib",
            "RLEMask",
            "from_dict",
            "()"
          ],
          "code_str": "rle1",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "rlemasklib.RLEMask"
        },
        {
          "import_components": [
            "rlemasklib",
            "RLEMask",
            "from_array",
            "()"
          ],
          "code_str": "rle2",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "rlemasklib.RLEMask"
        },
        {
          "import_components": [
            "rlemasklib",
            "RLEMask",
            "intersection",
            "()"
          ],
          "code_str": "intersection_rle",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "rlemasklib.RLEMask"
        }
      ],
      "example": {
        "document": "index",
        "ref_id": "functional-usage",
        "headings": [
          "Run-Length Encoded Mask Operations",
          "Functional Usage"
        ]
      },
      "doc_lineno": 187
    }
  ]
}